@startuml
class sequencediagram.MyLifeLine {
- UmlLifeline umlLifeline
- String interactionName
- boolean error
- MyLifeLine creator
- int foundNum
- int lostNum
- boolean isAlive
- boolean checkRule007
+ String getName()
+ void setInteractionName(String)
+ void setCreator(MyLifeLine)
+ void addFoundNum()
+ void addLostNum()
+ Pair<Integer,Integer> getLostAndFound()
+ UmlLifeline getCreator()
+ void checkAlive(UmlMessage)
+ boolean isCheckRule007()
}
class classdiagram.MyInterface {
- String name
- UmlInterface umlInterface
- HashSet<MyInterface> superInterfaces
+ HashSet<MyInterface> getSuperInterfaces()
+ void addSuperInterface(MyInterface)
+ String getName()
+ UmlInterface getUmlInterface()
+ boolean checkDuplicateInheritance(HashSet<UmlInterface>)
+ HashSet<MyClassOrInterface> getEdges()
+ UmlClassOrInterface getClassOrInterface()
}
class MyImplementation {
- ClassDiagram classDiagram
- StateDiagram stateDiagram
- SequenceDiagram sequenceDiagram
- void parse1(UmlElement)
- void parse2(UmlElement)
- void parse3(UmlElement)
+ void parse4(UmlElement)
+ void parse5(UmlElement)
+ int getClassCount()
+ int getClassSubClassCount(String)
+ int getClassOperationCount(String)
+ Map<Visibility,Integer> getClassOperationVisibility(String,String)
+ List<Integer> getClassOperationCouplingDegree(String,String)
+ int getClassAttributeCouplingDegree(String)
+ List<String> getClassImplementInterfaceList(String)
+ int getClassDepthOfInheritance(String)
+ int getParticipantCount(String)
+ UmlLifeline getParticipantCreator(String,String)
+ Pair<Integer,Integer> getParticipantLostAndFound(String,String)
+ int getStateCount(String)
+ boolean getStateIsCriticalPoint(String,String)
+ List<String> getTransitionTrigger(String,String,String)
+ void checkForUml001()
+ void checkForUml002()
+ void checkForUml003()
+ void checkForUml004()
+ void checkForUml005()
+ void checkForUml006()
+ void checkForUml007()
+ void checkForUml008()
+ void checkForUml009()
}
class classdiagram.MyOperation {
- String name
- boolean error
- Visibility visibility
- HashMap<NameableType,Integer> inValues
- HashSet<String> referenceTypes
- {static} HashSet<String> PARAMETER_TYPES
+ String getName()
+ Visibility getVisibility()
+ void addParameter(UmlParameter)
+ boolean getError()
+ boolean isSame(MyOperation)
+ HashSet<String> getReferenceTypes()
}
class statediagram.MyStateMachine {
- MyRegion myRegion
- String name
+ void setMyRegion(MyRegion)
+ int getStateNum()
+ boolean getStateIsCriticalPoint(String)
+ List<String> getTransitionTrigger(String,String)
+ boolean isCheckRule009()
+ boolean isCheckRule008()
}
class sequencediagram.SequenceDiagram {
- HashMap<String,Object> myElements
- HashMap<String,ArrayList<MyInteraction>> myInteractions
- HashSet<MyInteraction> myInteractionsForCheck
- boolean checkRule006
+ void parseUmlInteraction(UmlInteraction)
+ void parseUmlIifeLine(UmlLifeline)
+ void parseUmlEndpoint(UmlEndpoint)
+ void parseUmlMessage(UmlMessage)
+ int getParticipantCount(String)
+ UmlLifeline getParticipantCreator(String,String)
+ Pair<Integer,Integer> getParticipantLostAndFound(String,String)
- MyInteraction getInteraction(String)
- void checkAttribute(UmlLifeline)
+ void checkForUml006()
+ void checkForUml007()
}
class statediagram.MyState {
- String name
- boolean isFinal
- HashMap<MyState,HashMap<String,String>> nextStatesWithTrigger
- HashMap<String,HashSet<String>> eventWithGuard
- boolean checkRule009
- boolean checkRule008
+ String getName()
+ Set<MyState> getNextStates()
+ void addTransition(MyState)
+ void addTrigger(MyState,String,String,String)
+ ArrayList<String> getTriggerNames(MyState)
- void checkEvent(String,String)
+ boolean isCheckRule009()
+ boolean isCheckRule008()
}
class classdiagram.ClassDiagram {
- int classCount
- HashMap<String,Object> myElements
- HashMap<String,ArrayList<MyClass>> myClasses
- HashSet<MyInterface> totInterfaces
- HashSet<MyClass> totClasses
- HashMap<MyClassOrInterface,Integer> dfn
- HashMap<MyClassOrInterface,Integer> low
- LinkedList<MyClassOrInterface> stack
- HashSet<MyClassOrInterface> vis
- HashSet<UmlClassOrInterface> ans
- HashMap<String,UmlAssociationEnd> associations
- int tot
- boolean checkRule001
- boolean checkRule005
+ void parseUmlClass(UmlClass)
+ void parseUmlInterface(UmlInterface)
+ void parseUmlAttribute(UmlAttribute)
+ void parseUmlOperation(UmlOperation)
+ void parseUmlParameter(UmlParameter)
+ void parseUmlGeneration(UmlGeneralization)
+ void parseUmlInterfaceRealization(UmlInterfaceRealization)
+ void parseUmlAssociation(UmlAssociation)
+ void parseUmlAssociationEnd(UmlAssociationEnd)
+ int getClassCount()
+ int getClassSubClassCount(String)
+ int getClassOperationCount(String)
+ Map<Visibility,Integer> getClassOperationVisibility(String,String)
+ List<Integer> getClassOperationCouplingDegree(String,String)
+ int getClassAttributeCouplingDegree(String)
+ List<String> getClassImplementInterfaceList(String)
+ int getClassDepthOfInheritance(String)
- MyClass getClass(String)
- void checkName(String)
- void getCircle(MyClassOrInterface)
+ void checkForUml001()
+ void checkForUml002()
+ void checkForUml003()
+ void checkForUml004()
+ void checkForUml005()
}
interface classdiagram.MyClassOrInterface {
~ HashSet<MyClassOrInterface> getEdges()
~ UmlClassOrInterface getClassOrInterface()
}
class classdiagram.MyClass {
- int subClassNum
- int selfOperationNum
- UmlClass umlClass
- HashMap<String,HashMap<Visibility,Integer>> operationsWithVisibility
- HashMap<String,HashSet<MyOperation>> operations
- MyClass superClass
- HashSet<MyInterface> realizationInterfaces
- HashSet<String> referenceTypesForAttributes
- HashSet<String> attributeAndAssociationEnd
- HashSet<AttributeClassInformation> attributeClassInformation
- String id
- String name
+ void addRealizationInterface(MyInterface)
+ void setSuperClass(MyClass)
- HashSet<MyInterface> getRealizationInterfaces()
+ List<String> getRealizationInterfacesNames()
+ void addSubClassNum()
+ int getSubClassNum()
+ int getSelfOperationNum()
+ void addOperation(MyOperation)
+ HashMap<Visibility,Integer> getOperationWithVisibility(String)
+ void addReference(ReferenceType)
+ int getClassDepth()
- HashSet<String> getReferenceTypesForAttributes()
+ int getAttributeCouplingDegree()
- boolean checkMethodWrongTypeException(HashSet<MyOperation>)
- boolean checkMethodDuplicatedException(HashSet<MyOperation>)
+ List<Integer> getOperationCouplingDegree(String)
+ void addAttributeAndAssociationEnd(String)
+ UmlClassOrInterface getClassOrInterface()
+ HashSet<MyClassOrInterface> getEdges()
+ HashSet<AttributeClassInformation> getAttributeClassInformation()
}
class statediagram.StateDiagram {
- HashMap<String,Object> myElements
- HashMap<String,ArrayList<MyStateMachine>> myStateMachines
- HashSet<MyStateMachine> myStateMachinesForCheck
+ void parseUmlStateMachine(UmlStateMachine)
+ void parseUmlRegion(UmlRegion)
+ void parseUmlState(UmlState)
+ void parseUmlFinalState(UmlFinalState)
+ void parseUmlPseudoState(UmlPseudostate)
+ void parseUmlTransition(UmlTransition)
+ void parseUmlEvent(UmlEvent)
+ int getStateCount(String)
+ boolean getStateIsCriticalPoint(String,String)
+ List<String> getTransitionTrigger(String,String,String)
- MyStateMachine getStateMachine(String)
+ void checkForUml008()
+ void checkForUml009()
}
class MainClass {
+ {static} void main(String[])
}
class statediagram.MyRegion {
- MyState initialState
- String stateMachineName
- HashSet<MyState> arrivalFinalStates
- HashSet<MyState> vis
- HashSet<MyState> finalStates
- HashMap<String,ArrayList<MyState>> totStates
- int stateNum
- HashSet<MyState> totStatesForCheck
+ void addState(MyState)
+ void setStateMachineName(String)
+ void setInitialState(MyState)
+ void addFinalState(MyState)
+ int getStateNum()
+ boolean getStateIsCriticalPoint(String)
- void getArrivalFinalStates(MyState,MyState)
+ List<String> getTransitionTrigger(String,String)
- MyState getState(String)
+ boolean isCheckRule009()
+ boolean isCheckRule008()
}
class sequencediagram.MyInteraction {
- HashMap<String,ArrayList<MyLifeLine>> totLifelines
- HashSet<MyLifeLine> totLifeLinesForCheck
- String name
- int lifeLineNum
- UmlInteraction umlInteraction
+ UmlInteraction getUmlInteraction()
+ void addLifLine(MyLifeLine)
+ int getLifeLineNum()
+ UmlLifeline getParticipantCreator(String)
+ Pair<Integer,Integer> getParticipantLostAndFound(String)
- MyLifeLine getLifeLine(String)
+ boolean isCheckRule007()
}


classdiagram.MyClassOrInterface <|.. classdiagram.MyInterface
com.oocourse.uml3.interact.format.UserApi <|.. MyImplementation
classdiagram.MyClassOrInterface <|.. classdiagram.MyClass
@enduml